{"version":3,"file":"static/js/825.e87d2bde.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","webpack://react-homework-template/./src/components/Form/Form.module.css?89ba","components/Form/Form.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","pages/Contacts.jsx","redux/tasks/selectors.js"],"sourcesContent":["import { createSelector } from \"@reduxjs/toolkit\";\n\nexport const getContacts = state => state.contacts.items;\nexport const getFilter = state => state.filter;\nexport const getError = state => state.contacts.error;\nexport const getIsLoading = state => state.contacts.isLoading;\n\nexport const filteredContacts = createSelector(\n  [getContacts, getFilter],\n  (contacts, filter) => {\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);","// extracted by mini-css-extract-plugin\nexport default {\"addContact\":\"Form_addContact__bfrLD\",\"input\":\"Form_input__FTtTw\",\"form\":\"Form_form__e1yzW\",\"label\":\"Form_label__8nx+5\"};","import { useDispatch, useSelector } from 'react-redux';\nimport { createContacts } from 'redux/contacts/operations';\nimport { getContacts } from 'redux/contacts/selectors';\nimport css from './Form.module.css'\n\n const Form = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    const name = e.currentTarget.elements.name.value;\n    const number = e.currentTarget.elements.number.value;\n    if (contacts.some(contact => contact.name.toLowerCase() === name.toLowerCase())) {\n      alert(`${name} is already in contacts`);\n      return;\n    }\n     dispatch(createContacts({ name, number }));\n    e.currentTarget.reset();\n  }\n    return (\n      <form className={css.form} onSubmit={handleSubmit}>\n        <label htmlFor='name' className={css.label} >\n          Name\n        </label>\n        <input\n          type=\"text\"\n            name=\"name\"\n            id = 'name'\n            className={css.input}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n        <label htmlFor='number' className={css.label}>\n          Number\n        </label>\n        <input\n          type=\"tel\"\n            name=\"number\"\n            id='number'\n            className={css.input}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          />\n      <input type=\"submit\" className={css.addContact} value='Add contact'/>\n      </form>\n    )\n}\n  export default Form;\n\n// import { useState } from 'react'\n// import css from './Form.module.css'\n\n// import { getContacts } from 'redux/contacts/selectors'; \n// import { useDispatch, useSelector } from 'react-redux';\n// import { createContacts } from 'redux/contacts/operations'; \n\n\n\n// const Form = () => {\n  \n   \n//   const dispatch = useDispatch();\n//   const contacts = useSelector(getContacts);\n  \n//   const [name, setName] = useState('');\n//   const [number, setNumber] = useState('');\n\n//   const handleSubmit = event => {\n//     event.preventDefault();\n//     const existingName = contacts.some(\n//       item => item.name.toLowerCase() === name.toLowerCase()\n//     );\n//     const existingNumber = contacts.find(item => item.number === number);\n\n//     if (existingName) {\n//       return alert(`Contact \"${name}\" is already in contacts list`);\n//     } else if (existingNumber) {\n//       return alert(`Number \"${number}\" is already in contacts list`);\n//     }\n\n//     const newContact = {\n//       name,\n//       phone: number,\n//     };\n\n//     dispatch(createContacts(newContact));\n\n//     setName('');\n//     setNumber('');\n//   };\n\n//   const handleChange = event => {\n//     const { name, value } = event.target;\n//     switch (name) {\n//       case 'name':\n//         setName(value);\n//         break;\n//       case 'number':\n//         setNumber(value);\n//         break;\n//       default:\n//         return;\n//     }\n//   };\n\n\n\n    \n//         return (<div>\n//             <div> \n//          <h2>Name</h2>\n//         <form onSubmit={handleSubmit}>\n//             <label>\n//             <input\n//                 onChange={handleChange}\n//                value={name}\n//                 type=\"text\"\n//                 name=\"name\"\n//                 pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//                 title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n//                 required\n//                         /></label>\n//                     <h2>Number</h2>\n//                     <label>\n//                         <input\n//                             value={number}\n//                             onChange={handleChange}\n//                         type=\"tel\"\n//                         name=\"number\"\n//                          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//                         title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n//                             required\n//                         />\n//                     </label>\n//                     <p>\n//                         <input type=\"submit\" value={'add contact'} className={css.addContact}/>\n//                     </p>\n                \n//             </form>\n//         </div></div>\n//        )  \n    \n\n// }\n\n// export default  Form;\n\n","// extracted by mini-css-extract-plugin\nexport default {\"contactName\":\"ContactList_contactName__wLcl6\",\"contactNumber\":\"ContactList_contactNumber__aD17w\",\"container\":\"ContactList_container__hYHc3\"};","// import css from './ContactList.module.css'\n\n\n// import { useContacts } from 'redux/useContacts';\n\n\n\n\n// const ContactList = () => {\n\n//   const { contacts, filter, deleteContact } = useContacts();\n  \n\n//    const getFilterName = () => {\n//     const normalizedFilter = filter.toLowerCase();\n\n//     return contacts.filter(contact =>\n//             contact.name.toLowerCase().includes(normalizedFilter),)\n//   };\n\n//    const list = getFilterName();\n \n//     return (<div>\n//         <ul>\n//     {list.map(({ id, name, number}) => (\n//       <li key={id}>\n//         <span className={css.contactName}>{name}</span>  <span className={css.contactNumber}>: {number}</span>\n            \n//             <button\n//           type=\"button\"\n//           onClick={() => deleteContact(id)}\n//         >\n//           Удалить\n//         </button>\n//       </li>\n//     ))}\n//   </ul>\n//     </div>)\n\n    \n// }\n\n\n\n// export default ContactList;\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport css from './ContactList.module.css';\nimport { filteredContacts } from 'redux/contacts/selectors'; \nimport  { deleteContacts, fetchContacts } from 'redux/contacts/operations';\nimport { useEffect } from 'react';\n\n\n\n\n\nconst ContactList = () => {\n\n const contactItems = useSelector(filteredContacts);\n  \n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(fetchContacts())\n  }, [dispatch])\n\n\n \n    return (<div>\n        <ul className={css.container}>\n    {contactItems.map(({ id, name, number}) => (\n      <li key={id}>\n        <span className={css.contactName}>{name}</span>  <span className={css.contactNumber}>: {number}</span>\n            \n            <button\n          type=\"button\"\n          onClick={() => dispatch(deleteContacts(id))}\n        >\n          Удалить\n        </button>\n      </li>\n    ))}\n  </ul>\n    </div>)\n\n    \n}\n\n\n\nexport default ContactList;\n\n\n","// extracted by mini-css-extract-plugin\nexport default {\"filter\":\"Filter_filter__vxThR\",\"container\":\"Filter_container__L5eml\"};","import { useDispatch } from 'react-redux';\nimport css from './Filter.module.css'\nimport { setFilter } from 'redux/filter/filtersSlice';\n\n\nconst Filter = () => {\n  \n   const dispatch = useDispatch();\n  \n    return (\n        \n            <label className={css.container}>\n          <span className={css.filter}>Finde contacts by name</span>\n          <input className={css.filterInput} type=\"text\"   onChange={e => {\n          dispatch(setFilter(e.target.value));\n        }}/>\n                </label>\n        \n    )\n}\n\n\nexport default Filter;","import { useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { selectLoading } from 'redux/tasks/selectors';\nimport  Form  from '../components/Form/Form';\nimport ContactList from 'components/ContactList/ContactList';\nimport Filter from 'components/Filter/Filter';\n// import css from './pages.module.css'\n\n\nexport default function Contacts() {\n\n  const isLoading = useSelector(selectLoading);\n\n  return (\n    <>\n      <div >\n        <Helmet>\n        <title>Your Contacts</title>\n      </Helmet>\n        <Form />\n        <div>{isLoading && 'Request in progress...'}</div>\n         <div >\n         <div >\n        <Helmet>\n        <title>Your Contact's filter</title>\n      </Helmet>\n      <div>{isLoading && 'Request in progress...'}</div>\n      <Filter />\n      </div>\n      <ContactList />\n        </div>\n        <div >\n    \n\n      </div>\n</div>\n\n\n\n    </>\n  );\n}","export const selectLoading = state => state.tasks.loading;\n\nexport const selectFilter = state => state.tasks.filter;\n\nexport const selectAllTasks = state => state.tasks.items;"],"names":["getContacts","state","contacts","items","filteredContacts","createSelector","filter","name","toLowerCase","includes","dispatch","useDispatch","useSelector","className","css","onSubmit","e","preventDefault","currentTarget","elements","value","number","some","contact","alert","createContacts","reset","htmlFor","type","id","pattern","title","required","contactItems","useEffect","fetchContacts","map","onClick","deleteContacts","onChange","setFilter","target","Contacts","isLoading","selectLoading","Helmet","tasks","loading","selectAllTasks"],"sourceRoot":""}